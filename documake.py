#!/usr/bin/python3
# Copyright 2021 Ayush Bardhan Tripathy
# This software is licensed under MIT License.
# See LICENSE.md for more details.

import os, sys;
import yaml;

def getprop(doc, name):
    if name not in doc: 
        print("could not find property: {}\n".format(name));
        sys.exit();
    else: 
        return doc[name];

def parsemember(doc, name):
    if name == "struct" or name == "function":
        prop1 = getprop(doc, "type");
        prop2 = getprop(doc, "name");
        out  = "   {}, {}\n".format(prop1, prop2);
    else:
        prop1 = getprop(doc, "name");
        prop2 = getprop(doc, "value");
        out = "   {}, {}\n".format(prop1, prop2);
    return out;

def decltype(name):
    decls = {"function": "Parameter", "struct": "Member", "enum": "Value"}
    return decls[name];

def parsedecl(doc, name):
    id_ = ":{}:`{}` {} {}".format(name, name, getprop(doc, "id"), "( )" if name == "function" else "");
    out  = "{}\n{}\n".format(id_, "=" * len(id_));
    out += "{}\n\n".format(getprop(doc, "name"));
    out += "Description\n{}\n{}\n\n".format("-" * len("Description"), getprop(doc, "desc"));
    out += "{}s\n{}\n\n".format(decltype(name), "-" * (len(decltype(name)) + 1));
    out += ".. csv-table::\n";
    out += "   :widths: auto\n\n"; 
    
    for _, comp in getprop(doc, "comp").items():
        out += parsemember(comp, name);

    out += "\n\n----\n\n";
    return out;

def parsefile(doc):
    out  = ".. File: {}\n".format(doc["file"]);
    out += ".. This file is autogenerated. Do not edit.\n\n";

    props = ["enum", "struct", "function"];
    color = {"enum": "#5e81ac", "struct": "#bf616a", "function": "#a3be8c"};

    out += ".. raw:: html\n\n";
    out += "   <style>\n";
    for k, v in color.items():
        out += "     .{} {{ color: {}; font-style: italic; }}\n".format(k, v);
    out += "   </style>\n\n";

    for p in props:
        out += ".. role:: {}\n".format(p);
    out += "\n";

    for p in props:
        if p in doc:
            for _, decl in doc[p].items():
                out += parsedecl(decl, p);
    
    out += ".. Footer";

    return out;

def usage():
    print("usage: documake <input.yml> <output.rst>");

def main():
    if len(sys.argv) == 2:
        input_file = sys.argv[1];
        output_file = "out.rst";
    elif len(sys.argv) == 3:
        input_file = sys.argv[1];
        output_file = sys.argv[2];
    else: 
        usage();
        return;

    doc = None;
    with open(input_file) as f:
        doc = yaml.load(f, yaml.FullLoader);

    with open(output_file, "w") as f:
        out = parsefile(doc); 
        f.write(out);

    print("Generated output reST file: {} from input: {}".format(output_file, input_file))

if __name__ == "__main__":
    main();
